## Access and Authentication
Authentication against the API is currently handled via [HTTP Basic Auth](http://en.wikipedia.org/wiki/Basic_access_authentication) over HTTPS

### HTTP Basic Auth
You must have a valid `application_key` which identifies the Network you are making requests against.

You can find your `application_key` & `user_api_key` in PHG Console -> Reporting tab -> Report Download Options.
They are shown in the format `https://application_key:user_api_key@api.performancehorizon.com/...`

Unless you are creating a User, you should make all requests in the context of a User account. Each User has their own
unique `user_api_key` which must be sent in conjunction with the `application_key`.

- Username: `application_key`
- Password: `user_api_key`

Typically, authentication via HTTP Basic is achieved by sending the `Authorization` header in the following format:

```
Authorization: Basic cDN0ZXcxNDV5M3RhZzQxbjowaHkzNGho
```

Where `cDN0ZXcxNDV5M3RhZzQxbjowaHkzNGho` is the Base64 representation of the username and password:

```
base64(username + ':' + password)
```

## Response Formats
The default response format is `JSON`. You can specify the response format of each request, by adding a file extension
suffix to the end of the request URI. The requested format will dictate the HTTP `Content-Type` header that is returned
in the response. Currently, there are 3 available formats:

| Format               | Header                                   | Notes                                                               |
|----------------------|------------------------------------------|---------------------------------------------------------------------|
| `.json`              | `Content-Type: application/json`         |                                                                     |
| `.xml`               | `Content-Type: text/xml`                 |                                                                     |
| `.csv`               | `Content-Type: application/octet-stream` | Only available on specific endpoints                                |

## Compression
The API is compression enabled. To control whether the API response is compressed, send the relevant
`Accept-Encoding` HTTP header:

- Request: `Accept-Encoding: gzip`
- Response: `Content-Encoding: gzip`

## Standard Pagination
Certain endpoints will generate large result sets. To save bandwidth and long processing times, these endpoints will
paginate the results to reduce the strain on both client and server.

Any endpoint that supports pagination will return 3 attributes to support this:

- `offset` the current offset of the data returned
- `limit` the number of results to which the output was restricted
- `count` the total number of results available

If `offset` combined with `limit` is less than the overall `count`, the results have been truncated.
Therefore, to consume all data you will need to page through the result set.

### Paging
To paginate through a result set, you can use a combination of 2 parameters:

| Parameter            | Description                          | Notes                                                               |
|----------------------|--------------------------------------|---------------------------------------------------------------------|
| `offset`             | Offset the results by a given amount | Integer, defaults to `0`                                            |
| `limit`              | Limit the number of results returned | Integer, maximum limit is defined in result set headers             |

For example, if an endpoint produces 500 results, only the first 300 will be returned (results `0` to `299`).
In order to retrieve the remaining results, implement the `offset` GET param. In this example, adding `offset=300` to
the query string parameters.

There are 2 considerations when doing this:

- Results begin at offset `0`. If you're retrieving a report with `limit=300`, page 2 will begin at `offset=300`,
page 3 at `offset=600`, page 4 at `offset=900`, etc.
- The reports you generate are based on live data, and could be subject to continuous, incremental changes. If your
query covers a particularly busy data set, then data inserts or updates may occur between paging.

### Hypermedia
It can be cumbersome to manage pagination programmatically, especially when attempting to rapidly prototype. To provide
some helpful assistance, the API will output a `hypermedia` node for all paginated result sets. Essentially this
performs all necessary calculations and outputs all relevant information with absolute URI's to assist easier pagination.

```
"hypermedia": {
    "pagination": {
        "total_page_count": 15,
        "first_page": "/user.json?limit=100&offset=0",
        "last_page": "/user.json?limit=100&offset=1400",
        "next_page": "/user.json?limit=100&offset=100",
        "previous_page": null
    }
}
```

## Cursor Pagination
For the granular conversion reporting endpoint, we have adopted cursor based pagination. Due to the scale of some clients,
there is a large overhead involved in processing the offset and computing the total number of results.
This overhead compounds as the data set size increases, and when the data set grows large enough it becomes impractical to
perform the task in real time.

To ensure these high volume endpoints can scale, cursor based pagination has been implemented, where each response
will now return a `cursor_id` attribute along with the results. This indicates where the client is currently within the result set.
When the client requests another page, and includes the `cursor_id` value, the server will be able to determine where
the client is up to in the result set and send the appropriate items.

This approach does not suffer from the same overhead drawbacks that limit/offset pagination
does, and provides a consistent view of the result set across pages.

### Paging
To paginate through a result set, you can use a combination of 2 parameters:

| Parameter            | Description                                             | Notes                                                   |
|----------------------|---------------------------------------------------------|---------------------------------------------------------|
| `cursor_id`          | Cursor value that defines client position in result set | Integer                                                 |
| `limit`              | Limit the number of results returned                    | Integer, maximum limit is 300                           |

For example, if an endpoint produces 5,000 results, only the first 300 will be returned (results `0` to `299`). Within the
header attributes, a `cursor_id` will be included. Simply pass the `cursor_id` in conjunction with the desired `limit` to
return the subsequent items from the result set.

### Hypermedia
The hypermedia object has been updated to automatically include the relevant `cursor_id` and limit for the next page.

```
"hypermedia": {
    "pagination": {
        first_page: "/reporting/report_publisher/publisher/10l1/conversion.json?start_date=2018-03-01+00%3A00%3A00&end_date=2018-04-01+00%3A00%3A00&limit=300",
        next_page: "/reporting/report_publisher/publisher/10l1/conversion.json?start_date=2018-03-01+00%3A00%3A00&end_date=2018-04-01+00%3A00%3A00&limit=300&cursor_id=10325942995"
    }
}
```
