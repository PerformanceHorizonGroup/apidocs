FORMAT: 1A
HOST: https://api.performancehorizon.com

# Performance Horizon API

# Group User

## User [/user]

A User can have permissions against multiple Publisher and Advertiser accounts.

+ Attributes (object)
    + user_id: 300621 - ID of the user
    + Include User Base
    + network_id: 1
    + network_name: PHG
    + user_api_key: ZMEt5ca8
    + Include Signup IP

### Retrieve User [GET]

Retrieve the details of the authenticated user.

+ Response 200 (application/json)
    + Attributes (User Wrapper)

### Create an User [POST]

+ Request (application/json)
    + Attributes (User Base)
        + password: samplepass (required) - Password of the user

+ Response 200 (application/json)
    + Attributes (User Wrapper)

### Update an User [POST /user/{user_id}]

+ Parameters
    + user_id: 300621 - ID of the user

+ Request (application/json)
    + Attributes (User Base)

+ Response 200 (application/json)
    + Attributes (User Wrapper)

## Account [/user/account]

### Retrieve Accounts [GET]

+ Response 200 (application/json)
    + Attributes
        + user_accounts (array)
            + (Network Account Wrapper)
            + (Publisher Account Wrapper)
            + (Advertiser Account Wrapper)
            + (Campaign Group Account Wrapper)

# Group Network

## Network [/network]

+ Attributes (object)
    + network_id: 1 - ID of the network
    + network_name: PHG - Name of the network
    + network_description: PHG Network - Description of the network
    + network_notes: Internal PHG Network - Any additional notes for the network
    + network_application_id: 2
    + auto_approve_publishers (YesOrNo)
    + default_campaign_id
    + cm_client_id: b4d0d85c2cff813cdce092c261b2b200
    + network_contact_email
    + network_locale (Locale)

### List Networks [GET]

Retrieve the details of the authenticated network.

+ Response 200 (application/json)
    + Attributes
        + networks (array[Network Wrapper])

# Group Publisher

## Publishers [/user/publisher]

### List Publishers [GET]

List all the publishers of the network that can be accessed by the authenticated user

+ Response 200 (application/json)
    + Attributes
        + publishers (array[Publisher Wrapper])

### Create a Publisher [POST]

+ Request (application/json)
    + Attributes (Publisher Base)

+ Response 200 (application/json)
    + Attributes (Publisher Wrapper)

## Publisher [/user/publisher/{publisher_id}]

+ Parameters
    + publisher_id: 300254 - ID of the publisher

### Retreive Publisher [GET]

+ Response 200 (application/json)
    + Attributes (Publisher Wrapper)

### Update Publisher [POST]

+ Request (application/json)
    + Attributes (Publisher Base)

+ Response 200 (application/json)
    + Attributes (Publisher Wrapper)

# Group Publisher Website

Authenticated user must have access to the publisher account

## Publisher Websites [/user/publisher/{publisher_id}/website]

+ Parameters
    + publisher_id: 300254 - ID of the publisher

### List all Publisher Websites [GET]

List all the websites attached to the given publisher account

+ Response 200 (application/json)
    + Attributes
        + websites (array[Publisher Website Wrapper])

### Create Publisher Website [POST]

Create and add a new website for the given publisher account

+ Request Single (application/json)
    + Attributes (Publisher Website Base)

+ Request Multiple (application/json)
    + Attributes
        + websites (array[Publisher Website Base])

+ Response 200 (application/json)
    + Attributes
        + websites (array[Publisher Website Wrapper])

### Update Publisher Websites [PATCH]

Update the specified publisher website

+ Request (application/json)
    + Attributes
        + websites (array)
            + (object)
                + website_id: 300029 - ID of the publisher website
                + Include Publisher Website Base

+ Response 200 (application/json)
    + Attributes
        + databases (array[Publisher Website Wrapper])

## Publisher Website [/user/publisher/{publisher_id}/website/{website_id}]

+ Parameters
    + publisher_id: 300254 - ID of the publisher
    + website_id: 300029 - ID of the publisher website

### Retrieve a Publisher Website [GET]

Retrieve the information about the specified publisher website

+ Response 200 (application/json)
    + Attributes (Publisher Website Wrapper)

# Group Publisher Database

Authenticated user must have access to the publisher account

## Publisher Databases [/user/publisher/{publisher_id}/database]

+ Parameters
    + publisher_id: 300254 - ID of the publisher

### List all Publisher Databases [GET]

List all the databases attached to the given publisher account

+ Response 200 (application/json)
    + Attributes
        + databases (array[Publisher Database Wrapper])

### Create Publisher Database [POST]

Create and add a new database for the given publisher account

+ Request Single (application/json)
    + Attributes (Publisher Database Base)

+ Request Multiple (application/json)
    + Attributes
        + databases (array[Publisher Database Base])

+ Response 200 (application/json)
    + Attributes
        + databases (array[Publisher Database Wrapper])

### Update Publisher Databases [PATCH]

Update the specified publisher database

+ Request (application/json)
    + Attributes
        + websites (array)
            + (object)
                + website_id: 300029 - ID of the publisher website
                + Include Publisher Website Base

+ Response 200 (application/json)
    + Attributes
        + databases (array[Publisher Database Wrapper])

## Publisher Database [/user/publisher/{publisher_id}/database/{database_id}]

+ Parameters
    + publisher_id: 300254 - ID of the publisher
    + database_id: 300002 - ID of the publisher database

### Retrieve a Publisher Database [GET]

Retrieve the information about the specified publisher database

+ Response 200 (application/json)
    + Attributes (Publisher Database Wrapper)

# Group Advertiser

## Advertisers [/user/advertiser]

### List all Advertisers [GET]

List all the advertisers that can be accessed by the authenticated user

+ Response 200 (application/json)
    + Attributes
        + advertisers (array[Advertiser Wrapper])

### Create Advertiser [POST]

Create and add a new database for the given publisher account

+ Request (application/json)
    + Attributes (Advertiser Base)

+ Response 200 (application/json)
    + Attributes (Advertiser Wrapper)

## Advertiser [/user/advertiser/{advertiser_id}]

+ Parameters
    + advertiser_id: 300309 - ID of the advertiser

+ Attributes (object)
    + advertiser_id: 300309 - ID of the advertiser
    + Include Advertiser Base
    + contact_email: kristin.bouveng@performancehorizon.com
    + status (Status)
    + pre_payment
    + current_balance
    + vat_number: 636136773 (number)
    + default_currency (Currency)
    + payment_currency (Currency)
    + budget_summary_interval (number)
    + budget_summary_start_time (number)

### Retrieve an Advertiser [GET]

+ Response 200 (application/json)
    + Attributes (Advertiser Wrapper)

### Update an Advertiser [POST]

+ Request (application/json)
    + Attributes (Advertiser Base)

+ Response 200 (application/json)
    + Attributes (Advertiser Wrapper)

# Group Campaign

A Campaign is owned by an Advertiser and an Advertiser may have multiple Camapigns. A Campaign represents an entity which the Advertiser uses to represent something that they wish to allow Publishers the chance to promote. A Campaign dictates what products/events/conversions can be promoted, and lets the Publishers understand what Commission they would earn for generating sales/events/conversions. The Advertiser has complete control over their Campaigns and dictates which Publishers they accept onto the Campaign to promote their services.

## Campaigns [/campaign]

### List all Campaigns [GET]

+ Response 200 (application/json)
    + Attributes
        + campaigns (array[Campaign Wrapper])

### Create a Campaign [POST]

+ Request (application/json)
    + Attributes (Campaign Base)

+ Response 200 (application/json)
    + Attributes (Campaign Wrapper)

## Campaign [/campaign/{campaign_id}]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

+ Attributes (object)
    + campaign_id: 300389 - ID of the campaign
    + status (Status)
    + Include Campaign Base
    + Include Time Info
    + conversion_type: sale
    + default_override: 0
    + payment_date
    + network_fee
    + restricted_deep_linking: n (YesOrNo)
    + extra_restricted_deep_linking
    + cookie_status
    + ip_tracking_time: 0 (number)
    + conversion_hiatus_period: 7 (number)
    + force_approve_period: 0 (number)
    + invoice_address_1
    + invoice_address_2
    + invoice_address_3
    + invoice_address_4
    + invoice_address_country (Country)
    + invoice_address_postcode
    + auto_approve_publisher (YesOrNo)
    + recurring_payment_setup (YesOrNo)
    + dont_invoice: n (YesOrNo)
    + dont_consolidate (YesOrNo)
    + deferred_lead_submission
    + invoice_contact
    + invoice_company
    + invoice_only
    + pay_publisher_directly: n (YesOrNo)
    + budget_summary_interval
    + budget_summary_start_time
    + lead_confirmation_url_success
    + lead_confirmation_url_fail
    + tracking_subdomain
    + campaign_languages
    + tq_enabled: n (YesOrNo)
    + tq_enabled_publishers
    + is_cpc (YesOrNo)
    + commissions (array)
    + campaign_overloads (array)
    + campaign_currency_conversions (array)

### Retrieve a Campaign [GET]

+ Response 200 (application/json)
    + Attributes (Campaign Wrapper)

### Update a Campaign [POST]

+ Request (application/json)
    + Attributes (Campaign Base)

+ Response 200 (application/json)
    + Attributes (Campaign Wrapper)

### Delete a Campaign [DELETE]

Delete a specific campaign along with giving a reason to do so.

+ Request (application/json)
    + Attributes
        + reason: No longer needed

+ Response 204

# Group Commission

## Commission [/campaign/{campaign_id}/commission]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

+ Attributes (object)
    + commission_id: 300092 - ID of the commission
    + campaign_id: 300389
    + reference_id: 300389
    + reference_type: campaign (enum)
        + campaign
        + participation
        + group
        + voucher
    + Include Commission Base
    + sale_type: simple
    + override: 10
    + override_type: override
    + active: n (YesOrNo)
    + default_commission: false

### List all Campaign level Commissions [GET /campaign/{campaign_id}/campaign/{campaign_id}/commission]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

+ Response 200 (application/json)
    + Attributes
        + commissions (array)
            + (object)
                + commission (Commission)
                    + reference_type: campaign

### List all Publisher level Commissions [GET /campaign/{campaign_id}/publisher/{publisher_id}/commission]

+ Parameters
    + campaign_id: 300389 - ID of the campaign
    + publisher_id: 300254 - ID of the publisher

+ Response 200 (application/json)
    + Attributes
        + commissions (array)
            + (object)
                + commission (Commission)
                    + reference_type: participation

### List all Group level Commissions [GET /campaign/{campaign_id}/commission_group/{commission_group_id}/commission]

+ Parameters
    + campaign_id: 300389 - ID of the campaign
    + commission_group_id: 300195 - ID of the commission group

+ Response 200 (application/json)
    + Attributes
        + commissions (array)
            + (object)
                + commisison (Commission)
                    + reference_type: group

### List all Voucher level Commissions [GET /campaign/{campaign_id}/voucher_code/{voucher_code_id}/commission]

+ Parameters
    + campaign_id: 300389 - ID of the campaign
    + voucher_code_id: 300024 - ID of the voucher

+ Response 200 (application/json)
    + Attributes
        + commissions (array)
            + (object)
                + commisison (Commission)
                    + reference_type: voucher

### Create a Commission [POST]

+ Request (application/json)
    + Attributes
        + commissions (array)
            + (Commission Base)
                + commission_level (required)
                + reference_id

+ Response 200 (application/json)
    + Attributes
        + commission (array[Commission Wrapper])

### Update a Commission [PATCH]

+ Request (application/json)
    + Attributes
        + commissions (array)
            + (Commission Base)
                + commission_id: 300092 - ID of the commission

+ Response 200 (application/json)
    + Attributes
        + commission (array[Commission Wrapper])

# Group Commission Group

A Campaign owner can organise Publishers into Groups. These Groups can be used for Reporting purposes, Communication filters, Commission offers and Voucher Code allocation.

## Commission Groups [/campaign/{campaign_id}/commission_group]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

### List all Commission Groups [GET]

+ Response 200 (application/json)
    + Attributes
        + commission_groups (array[Commission Group Wrapper])

### Create Commission Groups [POST /commission_group]

+ Request (application/json)
    + Attributes
        + commission_groups (array[Commission Group Base])

+ Response 200 (application/json)
    + Attributes (Commission Group Wrapper)

### Update Commission Groups [PATCH /commission_group]

+ Request (application/json)
    + Attributes
        + commission_groups (array)
            + (Commission Group Base)
                + commission_group_id: 300195 - ID of the commission group

+ Response 200 (application/json)
    + Attributes (Commission Group Wrapper)

## Commission Group [/campaign/{campaign_id}/commission_group/{commission_group_id}]

+ Parameters
    + campaign_id: 300389 - ID of the campaign
    + commission_group_id: 300195 - ID of the commission group

+ Attributes (object)
    + commission_group_id: 300195 - ID of the commission group
    + Include Commission Group Base
    + active (YesOrNo)
    + last_modified: `2015-04-10 01:59:54`

### Retrieve a Commission Group [GET]

+ Response 200 (application/json)
    + Attributes (Commission Group Wrapper)

# Group Voucher Code

A Voucher references a coupon code, or voucher code which the Advertiser offers to their customers to usually perform a price discount at the end of the transaction. Specific rules can be set to defined Vouchers ensuring that only valid codes can be used and can also be restricted to specific Publishers.

## Voucher Codes [/campaign/{campaign_id}/voucher_code]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

### List all Voucher Codes [GET]

+ Response 200 (application/json)
    + Attributes
        + voucher_codes (array[Voucher Code Wrapper])

### Create Voucher Codes [POST]

+ Request (application/json)
    + Attributes
        + voucher_codes (array[Voucher Code Base])

+ Response 200 (application/json)
    + Attributes (Voucher Code Wrapper)

### Update Voucher Codes [PATCH]

+ Request (application/json)
    + Attributes
        + voucher_codes (array)
            + (Voucher Code Base)
                + voucher_code_id: 300024 - ID of the voucher code

+ Response 200 (application/json)
    + Attributes (Voucher Code Wrapper)

## Voucher Code [/campaign/{campaign_id}/voucher_code/{voucher_code_id}]

+ Parameters
    + campaign_id: 300389 - ID of the campaign
    + voucher_code_id: 300024 - ID of the voucher code

+ Attributes (object)
    + voucher_code_id: 300024 - ID of the voucher code
    + campaign_id: 300389 - ID of the campaign
    + Include Voucher Code Base
    + active (YesOrNo)
    + on_expiry: ignore
    + on_invalid_user: ignore

### Retrieve a Voucher Code [GET]

+ Response 200 (application/json)
    + Attributes (Voucher Code Wrapper)

# Group Participating Publishers

Before Publishers can generate conversions for a Campaign, they must be approved to do so. A Publisher can apply to be part of a Campaign, or the Advertiser can choose to add the Publisher(s) of their choice to their own Campaign. Furthermore, if an Advertiser has stipulated their own unique set of Campaign Terms and Conditions, the Publisher must explicitly agree to these if they are to be fully approved on the Campaign.

## Participating Publishers [/campaign/{campaign_id}/publisher]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

### List all Participating Publishers [GET]

View all the publishers participating in a campaign

+ Response 200 (application/json)
    + Attributes
        + publishers (array[Participating Publisher Wrapper])

### Create a Participating Publisher [POST]

+ Request (application/json)
    + Attributes
        + publishers (array)
            + (object)
                + publisher_id: 300254 - ID of the publisher
                + campaign_status (Status)

+ Response 200 (application/json)
    + Attributes
        + publishers (array[Participating Publisher Wrapper])

# Group Publisher Campaign

## Publisher Campaigns [/user/publisher/{publisher_id}/campaign]

+ Parameters
    + publisher_id: 300254 - ID of the publisher

### List all Publisher Campaigns [GET]

View all Campaigns that the Publisher is associated with, along with the status of any Participation.

+ Response 200 (application/json)
    + Attributes
        + campaigns (array[Publisher Campaign Wrapper])

### Create Publisher Campaigns [POST]

Request access to one or more Campaigns. If a Campaign has any custom Terms and Conditions then the Publisher must agree to these terms when requesting access. On certain Campaigns, you may find that a Publisher will be auto-approved. However some Advertisers will stipulate that they wish to review all Participations. Therefore once access is requested, the Publisher will be shown as pending until this decision is made.

+ Request (application/json)
    + Attributes
        + campaigns (array)
            + (object)
                + campaign_id: 300389 - ID of the campaign
                + terms_id: 111111l8

+ Response 200 (application/json)
    + Attributes
        + campaigns (array[Publisher Campaign Wrapper])

# Group Invoice

## Invoices [/user/advertiser/{advertiser_id}/invoice]

+ Parameters
    + advertiser_id: 300309 - ID of the advertiser

### List all Invoices [GET]

+ Response 200 (application/json)
    + Attributes
        + invoices (array[Invoice Wrapper])

## Invoice [/user/advertiser/{advertiser_id}/invoice/{invoice_id}]

+ Parameters
    + advertiser_id: 300309 - ID of the advertiser
    + invoice_id: 300029 - ID of the invoice

+ Attributes
    + invoice_id: 300029 - ID of the invoice
    + campaign_id: 300389 - ID of the campaign
    + merchant_invoice_id
    + creation_date: `2015-12-14 22:58:25`
    + payment_date
    + status: created (enum)
        + created
        + sent
        + paid
    + currency (Currency)
    + paid_currency (Currency)
    + invoice_net_value: 770.84 (number)
    + invoice_vat_value: 0 (number)
    + invoice_total_value: 770.84 (number)
    + payment_reference
    + publisher_commission: 700.76 (number)
    + publisher_override: 70.08 (number)
    + set_start_date: `2015-08-30`
    + set_end_date: `2015-12-09`
    + set_timezone (Timezone)
    + invoiced: All
    + average_conversion_age: 14 (number)
    + invoice_reference: `I-300389-300029`
    + vat_rate: 0 (number)
    + `payment_due_by_date`
    + download
    + item_download

### Retrieve an Invoice [GET]

+ Response 200 (application/json)
    + Attributes (Invoice Wrapper)

# Group Campaign Conversion

An Advertiser must approve or reject all events that occur on their Campaigns. A conversion can have one or more conversion items, and it is the items which must be updated before they can be Invoiced or ignored. It is possible to update the status of items individually, or all items within a conversion can be referenced at the same time. Due to the high volume of processing that can happen on this endpoint, it is Job enabled.

### Update Conversion Events [POST /campaign/{campaign_id}/conversion]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

+ Request (application/json)
    + Attributes
        + conversions (array)
            + (object)
                + One Of
                    + conversion_id - The unqiue identifier for a conversion, which will affect all items attached to it
                    + conversion_reference - The Advertiser's own reference for the conversion, which will affect all items attached to it
                    + conversion_item_id - The unique identifier for an idividual item, this only affects its own status
                + status (enum)
                    + accepted
                    + rejected
                + reject_reason

+ Response 200 (application/json)
    + Attributes (Job Wrapper)

# Group Campaign Tracking

To track conversions on a Campaign, all conversion data must be passed to the PHG tracking API. There are 2 distinct methods of passing this data, via an image/pixel tag (which emulates a HTTP GET), and via a direct API call (GET or POST). This endpoint is intended as a quick reference to the syntax of the tracking calls, the actual tracking implementation should be performed in co-operation with the Performance Horizon Integration team.

### View Example [GET /campaign/{campaign_id}/tracking]

+ Parameters
    + campaign_id: 300389 - ID of the campaign

+ Response 200 (application/json)
    + Attributes
        + tracking_code
            + pixel_tracking
                + default_conversion: `<img src="http://demo.prf.hn/conversion/campaign:300389/value:[xx:xx]/conversionref:[xxxxx]" height="1" width="2" />`
                + categories (object)
            + api_tracking
                + default_conversion: `http://demo.prf.hn/conversion/clickref:[xxxxx]/campaign:300389/value:[xx:xx]/conversionref:[xxxxx]`
                + categories (object)

# Group Selfbill

Once funds have been received from the Advertiser, Performance Horizon will allocate all Commissions to the relevant Publishers.

## Selfbills [/user/publisher/{publisher_id}/selfbill]

+ Parameters
    + publisher_id: 300254 - ID of the publisher

### List all Selfbills [GET]

+ Response 200 (application/json)
    + Attributes
        + selfbills (array[Selfbill Wrapper])

## Selfbill [/user/publisher/{publisher_id}/selfbill/{publisher_self_bill_id}]

+ Parameters
    + publisher_id: 300254 - ID of the publisher
    + publisher_self_bill_id: 300003

+ Attributes
    + publisher_id: 300254 - ID of the publisher
    + publisher_self_bill_id: 300003
    + publisher_self_bill_reference
    + creation_date: `2012-07-25 14:22:35`
    + payment_date
    + timestamp: `2012-07-25 14:22:35`
    + payment_batch_id: 0
    + status: created (enum)
    + tracked_net_value: 430.17 (number)
    + tracked_currency (Currency)
    + paid_currency (Currency)
    + selfbill_currency (Currency)
    + majority_received_currency (Currency)
    + net_value: 430.17 (number)
    + vat_value: 0 (number)
    + withheld_tax: 0 (number)
    + total_value: 430.17 (number)
    + items_in_bill: 5 (number)
    + publisher_payment_detail_set_id: 111111l80
    + payment_detail_set_id: null
    + self_bill_reference: `S-300254-300003`
    + legal_entity (Country)
    + vat_rate: 0 (number)
    + download: false (boolean)
    + item_download: false (boolean)

### View a Selfbill [GET]

+ Response 200 (application/json)
    + Attributes (Selfbill Wrapper)

# Data Structures

## User Base (object)
+ user_name: demomaster (required) - Username of the user
+ email_address: matthew.clarke@performancehorizon.com (required) - Email address registered to the user
+ firstname: Pete (required) - First name of the user
+ lastname: CheyneWins (required) - Surname of the user
+ Include Phone
+ fax: 123456 (number) - Fax number
+ Include Address
+ locale (Locale)
+ Include Signup IP

## Advertiser Base (object)
+ account_name: demoadvertiser (required)
+ company_name: PHG Demo Advertiser (required)
+ Include Address
+ Include Phone
+ Include Signup IP

## Campaign Base (object)
+ advertiser_id: 300309 (required) - ID of the advertiser the campaign should belong to
+ title: PHG Aff Demo (required)
+ destination_url: http://www.performancehorizon.com (required)
+ One Of
    + default_commission_rate: 10 (number)
    + default_commission_value (number)
+ vertical_id: 10 (number)
+ vertical_name: Other
+ test_mode: n (YesOrNo)
+ tracking_method: s2s (enum)
    + pixel
    + api
    + s2s
+ allow_third_party_pixel: n (YesOrNo)
+ campaign_logo
+ hidden_campaign: n (YesOrNo)
+ default_currency (Currency)
+ tq_auto_approve: 60 (number)
+ campaign_notes
+ description (object)
+ terms (object)
    + en-US (Term)
+ cookie_period
+ multiple_conversions_per_click: n (enum)
    + y
    + n
    + 2 (number)
    + 3 (number)
    + 4 (number)
    + 5 (number)
    + 6 (number)
    + 7 (number)
    + 8 (number)
    + 9 (number)
    + 10 (number)
+ unique_conversion_refs: y (enum)
    + y
    + n
    + ignore
+ allow_deep_linking (YesOrNo)
+ append_url_parameters
+ prepend_url_string
+ associated_campaigns
+ auto_rejected_ips
+ secure_tracking: n (YesOrNo)

## Commission Group Publisher (object)
+ publisher_id: 300252 - ID of the publisher
+ publisher_name: Bloggers
+ added: `2015-12-14 22:58:25`

## Commission Group Base (object)
+ name: Fansites 3% (required)
+ campaign_id: 300389 (required) - ID of the campaign
+ description
+ Include Time Range
+ publishers (array[Commission Group Publisher])

## Voucher Code Base (object)
+ voucher_code: promocode (required)
+ description
+ Include Time Range
+ commission_groups (array) - Array of IDs of the commission groups

## Commission Base (object)
+ One Of
    + commission_rate: 4
    + commission_value
    + commission_value_cpc
+ Include Time Range
+ country (Country)
+ vertical_id: 10 (number, required)
+ vertical_name: Other (required)
+ conversion_type: 10 (number, required)
+ sku
+ customer_type: new (enum)
    + new
    + existing
+ category
+ customer_reference
+ advertiser_reference
+ update_description: Promotional Period

## Address (object)
+ address1: Gardegasse 11 (required) - 1st line of the address
+ address2: Top 7 - 2nd line of the address
+ address3: London - 3rd line of the address
+ address4 - 4th line of the address
+ country (Country, required) - Country of the address
+ postcode: `A-101` (required) - Postcode/Zipcode attached to the address

## Term (object)
+ terms: This is terms document
+ terms_id: 1100l119

## Permissions (object)
+ super_admin_readwrite: create, update, delete (array)

# Group Campaigns (object)
+ title : PHG Aff Demo
+ campaign_id : 300389

## Campaign Group (object)
+ campaign_group_id : 111111l1
+ title : Example Group - title of the campaign group
+ advertiser_id : 300309 - id of owning advertiser account
+ week_start : monday
+ reporting_timezone : GMT
+ default_currency : GBP
+ campaigns (array[Group Campaigns])

:[](common.apib)

## User Wrapper (object)
+ user (User)

## Network Wrapper (object)
+ network (Network)

## Advertiser Wrapper (object)
+ advertiser (Advertiser)

## Publisher Website Wrapper (object)
+ website (Publisher Website)

## Publisher Database Wrapper (object)
+ database (Publisher Database)

## Campaign Wrapper (object)
+ campaign (Campaign)

## Commission Wrapper (object)
+ commission (Commission)

## Commission Group Wrapper (object)
+ commission_group (Commission Group)

## Voucher Code Wrapper (object)
+ voucher_code (Voucher Code)

## Participating Publisher Wrapper (object)
+ publisher (Publisher)
    + campaign_status (Status)

## Publisher Campaign Wrapper (object)
+ campaign (Campaign)
    + publisher_status (Status)

## Network Account Wrapper (object)
+ network (Network)
    + permissions (Permissions)

## Publisher Account Wrapper (object)
+ publisher (Publisher)
    + permissions (Permissions)

## Advertiser Account Wrapper (object)
+ advertiser (Advertiser)
    + permissions (Permissions)

## Campaign Group Account Wrapper (object)
+ campaign_group : (Campaign Group)
    + permissions (Permissions)

## Invoice Wrapper (object)
+ invoice (Invoice)

## Selfbill Wrapper (object)
+ selfbill (Selfbill)
